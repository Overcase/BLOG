(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{219:function(e,t,r){"use strict";r.r(t);var n=r(0),o=Object(n.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[r("p",[e._v("本篇例举了前端测试的一些工具\n")]),e._v(" "),r("ol",[r("li",[r("a",{attrs:{href:"https://github.com/Huddle/PhantomCSS",target:"_blank",rel:"noopener noreferrer"}},[e._v("PhantomCSS"),r("OutboundLink")],1)])]),e._v(" "),r("p",[e._v("像素对比比较出名的工具是"),r("a",{attrs:{href:"https://github.com/Huddle/PhantomCSS",target:"_blank",rel:"noopener noreferrer"}},[e._v("PhantomCSS"),r("OutboundLink")],1),e._v("。 PhantomCSS结合了 "),r("a",{attrs:{href:"http://casperjs.readthedocs.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Casperjs"),r("OutboundLink")],1),e._v("截图和"),r("a",{attrs:{href:"http://huddle.github.io/Resemble.js/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ResembleJs"),r("OutboundLink")],1),e._v(" 图像对比分析。单纯从易用性和对比效果来说还是不错的。")]),e._v(" "),e._m(0),e._v(" "),r("p",[e._v("如果想测试多浏览器下的兼容性情况，只需要拿到多个浏览器下的截图即可。多浏览器测试最出名的当属"),r("a",{attrs:{href:"http://www.seleniumhq.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("selenium"),r("OutboundLink")],1),e._v(" , selenium可以自动化的获取多个浏览器下的截图，前端工程师来说还可以借助Node的"),r("a",{attrs:{href:"http://webdriver.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("webdriver"),r("OutboundLink")],1),e._v(" 来轻松开发测试脚本。\n但selenium的安装和上手成本要稍大些，而且对于多浏览器来说，各个浏览器之间的兼容性对比容易出错。不同浏览器截图可能一像素的偏差就导致截屏对比失败，多浏览器可能"),r("strong",[e._v("更适用回归性测试")]),e._v("。")]),e._v(" "),e._m(1),e._v(" "),r("p",[e._v("国外有人将像素对比应用到了响应式页面上，如果您针对PC和移动设备使用同一个网页，响应式测试可以很快的回归你的页面在不同尺寸上的页面是否正常。与单纯针对移动端开发的响应式不同，同时支持PC移动的页面更容易发生错乱。\n例如"),r("a",{attrs:{href:"http://garris.github.io/BackstopJS",target:"_blank",rel:"noopener noreferrer"}},[e._v("BackstopJS"),r("OutboundLink")],1),e._v(" 项目，便是通过PhantomJS、capserJS等工具在不同尺寸下截图然后根据resemberJS进行像素比对判断是否正常:")]),e._v(" "),e._m(2),e._v(" "),r("p",[e._v("像素对比虽然直观，但动态元素居多且无法保证测试页面与线上页面同步时有所局限。"),r("a",{attrs:{href:"https://github.com/fouber",target:"_blank",rel:"noopener noreferrer"}},[e._v("@云龙"),r("OutboundLink")],1),e._v("大牛针对这个问题提供了新的解决方案"),r("a",{attrs:{href:"https://github.com/fouber/page-monitor",target:"_blank",rel:"noopener noreferrer"}},[e._v("page-monitor"),r("OutboundLink")],1),e._v("，根据dom结构与样式的对比来对比整个页面的变动部分。")]),e._v(" "),r("p",[r("img",{attrs:{src:"http://fex.baidu.com/img/front-end-test/pagemonitor.png",alt:"图片"}}),e._v("\n通过page-monitor你可以很快的搭建一个监控系统，监控页面的文字、样式等变动情况。\n像素对比和dom结构对比各有优势，但也无法解决全部问题。何不综合利用呢？FEX部门QA同事就结合了两种方式提供了pagediff平台，正在对外公测中！有兴趣可以体验一把吧~ "),r("a",{attrs:{href:"http://pagediff.baidu.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://pagediff.baidu.com"),r("OutboundLink")],1),e._v("\nQA同学开发的平台都这么炫，作为前端怎么能不了解一点测试知识呢？")]),e._v(" "),e._m(3),e._v(" "),r("p",[e._v("上面提到界面回归测试"),r("strong",[e._v("无法取代功能测试")]),e._v("。即便是界面正常，功能正常也是必须关注的部分。最直接的功能测试就是模拟用户操作，通过模拟正常的操作流程来判断页面展现是否符合预期。\n"),r("a",{attrs:{href:"http://phantomjs.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Phantomjs"),r("OutboundLink")],1),r("strong",[e._v("、")]),r("a",{attrs:{href:"http://casperjs.readthedocs.org/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CasperJS"),r("OutboundLink")],1),e._v("\n大名鼎鼎的PhantomJS当然要隆重介绍啦！前面界面对比测试基本都是基于PhantomJS开发的， Phantom JS是一个服务器端的 JavaScript API 的 WebKit。其支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG。对于web测试、界面、网络捕获、页面自动化访问等等方面可以说是信手拈来。")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[t("strong",[this._v("如何测试多浏览器")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[t("strong",[this._v("响应式页面测试")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("dom结构对比")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("用户操作测试")])])}],!1,null,null,null);o.options.__file="automationTest.md";t.default=o.exports}}]);